import Base: intersect

struct Triangle6{T <: AbstractFloat} <: Face
    points::NTuple{6, Point{T}}
end

# Constructors
# -------------------------------------------------------------------------------------------------
Triangle6(p₁::Point{T}, 
         p₂::Point{T}, 
         p₃::Point{T},
         p₄::Point{T},
         p₅::Point{T},
         p₆::Point{T}
        ) where {T <: AbstractFloat} = Triangle6((p₁, p₂, p₃, p₄, p₅, p₆))


# Methods
# -------------------------------------------------------------------------------------------------
function (tri6::Triangle6)(r::T, s::T) where {T <: AbstractFloat}
    weights = [(1 - r - s)*(2(1 - r - s) - 1), 
                                     r*(2r-1),
                                     s*(2s-1),
                               4r*(1 - r - s),
                                         4r*s,
                               4s*(1 - r - s)]
    return sum(weights .* tri6.points) 
end

function derivatives(tri6::Triangle6{T}, r::T, s::T) where {T <: AbstractFloat}
    # Return ( dtri6/dr(r, s), dtri6/ds(r, s) )
    d_dr = (4r + 4s - 3)*tri6.points[1] + 
                (4r - 1)*tri6.points[2] +
           4(1 - 2r - s)*tri6.points[4] +     
                    (4s)*tri6.points[5] +
                   (-4s)*tri6.points[6]

    d_ds = (4r + 4s - 3)*tri6.points[1] + 
                (4s - 1)*tri6.points[3] +
                   (-4r)*tri6.points[4] +
                    (4r)*tri6.points[5] +
           4(1 - r - 2s)*tri6.points[6]     
    return (d_dr, d_ds) 
end

function gauss_legendre_quadrature(tri6::Triangle6{T}, N::Int64) where {T <: AbstractFloat}
    # The weights and points for Gauss-Legendre quadrature on the parametric unit triangle
    # ∑wᵢ= 1/2, rᵢ∈ [0, 1], sᵢ∈ [0, 1], rᵢ + sᵢ ≤ 1
    if N == 12
        # P6. 0 negative weights, 0 points outside of the triangle
        w = [0.058393137863189,
             0.058393137863189,
             0.058393137863189,
             0.025422453185104,
             0.025422453185104,
             0.025422453185104,
             0.041425537809187,
             0.041425537809187,
             0.041425537809187,
             0.041425537809187,
             0.041425537809187,
             0.041425537809187]

        rs = [(0.249286745170910, 0.249286745170910), 
              (0.249286745170910, 0.501426509658179), 
              (0.501426509658179, 0.249286745170910),
              (0.063089014491502, 0.063089014491502),
              (0.063089014491502, 0.873821971016996),
              (0.873821971016996, 0.063089014491502),
              (0.310352451033785, 0.636502499121399),
              (0.636502499121399, 0.053145049844816),
              (0.053145049844816, 0.310352451033785),
              (0.310352451033785, 0.053145049844816),
              (0.636502499121399, 0.310352451033785),
              (0.053145049844816, 0.636502499121399)]

    elseif N == 27
        # P11. 0 negative weights, 3 points outside of the triangle
        w = [0.00046350316448,
             0.00046350316448,
             0.00046350316448,
             0.03857476745740,
             0.03857476745740,
             0.03857476745740,
             0.02966148869040,
             0.02966148869040,
             0.02966148869040,
             0.01809227025170,
             0.01809227025170,
             0.01809227025170,
             0.00682986550135,
             0.00682986550135,
             0.00682986550135,
             0.02616855598110,
             0.02616855598110,
             0.02616855598110,
             0.02616855598110,
             0.02616855598110,
             0.02616855598110,
             0.01035382981955,
             0.01035382981955,
             0.01035382981955,
             0.01035382981955,
             0.01035382981955,
             0.01035382981955]

        rs = [(+0.5346110482710, +0.5346110482710),
              (-0.0692220965415, +0.5346110482710),
              (+0.5346110482710, -0.0692220965415),
              (+0.3989693029660, +0.3989693029660),
              (+0.2020613940680, +0.3989693029660),
              (+0.3989693029660, +0.2020613940680),
              (+0.2033099004310, +0.2033099004310),
              (+0.5933801991370, +0.2033099004310),
              (+0.2033099004310, +0.5933801991370),
              (+0.1193509122830, +0.1193509122830),
              (+0.7612981754350, +0.1193509122830),
              (+0.1193509122830, +0.7612981754350),
              (+0.0323649481113, +0.0323649481113),
              (+0.9352701037770, +0.0323649481113),
              (+0.0323649481113, +0.9352701037770),
              (+0.5932012134280, +0.3566206482610),
              (+0.0501781383105, +0.5932012134280),
              (+0.3566206482610, +0.0501781383105),
              (+0.0501781383105, +0.3566206482610),
              (+0.3566206482610, +0.5932012134280),
              (+0.5932012134280, +0.0501781383105),
              (+0.8074890031600, +0.1714889803040),
              (+0.0210220165362, +0.8074890031600),
              (+0.1714889803040, +0.0210220165362),
              (+0.0210220165362, +0.1714889803040),
              (+0.1714889803040, +0.8074890031600),
              (+0.8074890031600, +0.0210220165362)]

    elseif N == 48
        # P15. 0 negative weights, 9 points outside of the triangle
        w = [0.000958437821425,
             0.000958437821425,
             0.000958437821425,
             0.022124513635550,
             0.022124513635550,
             0.022124513635550,
             0.025593274359450,
             0.025593274359450,
             0.025593274359450,
             0.011843867935350,
             0.011843867935350,
             0.011843867935350,
             0.006644887845000,
             0.006644887845000,
             0.006644887845000,
             0.002374458304095,
             0.002374458304095,
             0.002374458304095,
             0.019275036299800,
             0.019275036299800,
             0.019275036299800,
             0.019275036299800,
             0.019275036299800,
             0.019275036299800,
             0.013607907160300,
             0.013607907160300,
             0.013607907160300,
             0.013607907160300,
             0.013607907160300,
             0.013607907160300,
             0.001091038683400,
             0.001091038683400,
             0.001091038683400,
             0.001091038683400,
             0.001091038683400,
             0.001091038683400,
             0.010752659923850,
             0.010752659923850,
             0.010752659923850,
             0.010752659923850,
             0.010752659923850,
             0.010752659923850,
             0.003836971315525,
             0.003836971315525,
             0.003836971315525,
             0.003836971315525,
             0.003836971315525,
             0.003836971315525]

        rs = [(+0.5069729168580, +0.5069729168580), 
              (-0.0139458337165, +0.5069729168580), 
              (+0.5069729168580, -0.0139458337165),
              (+0.4314063542830, +0.4314063542830),
              (+0.1371872914340, +0.4314063542830),
              (+0.4314063542830, +0.1371872914340),
              (+0.2776936448470, +0.2776936448470),
              (+0.4446127103060, +0.2776936448470),
              (+0.2776936448470, +0.4446127103060),
              (+0.1264648910410, +0.1264648910410),
              (+0.7470702179170, +0.1264648910410),
              (+0.1264648910410, +0.7470702179170),
              (+0.0708083859747, +0.0708083859747),
              (+0.8583832280510, +0.0708083859747),
              (+0.0708083859747, +0.8583832280510),
              (+0.0189651702411, +0.0189651702411),
              (+0.9620696595180, +0.0189651702411),
              (+0.0189651702411, +0.9620696595180),
              (+0.6049544668930, +0.2613113711400),
              (+0.1337341619670, +0.6049544668930),
              (+0.2613113711400, +0.1337341619670),
              (+0.1337341619670, +0.2613113711400),
              (+0.2613113711400, +0.6049544668930),
              (+0.6049544668930, +0.1337341619670),
              (+0.5755865555130, +0.3880467670900),
              (+0.0363666773969, +0.5755865555130),
              (+0.3880467670900, +0.0363666773969),
              (+0.0363666773969, +0.3880467670900),
              (+0.3880467670900, +0.5755865555130),
              (+0.5755865555130, +0.0363666773969),
              (+0.7244626630770, +0.2857122200500),
              (-0.0101748831266, +0.7244626630770),
              (+0.2857122200500, -0.0101748831266),
              (-0.0101748831266, +0.2857122200500),
              (+0.2857122200500, +0.7244626630770),
              (+0.7244626630770, -0.0101748831266),
              (+0.7475564660520, +0.2155996640720),
              (+0.0368438698759, +0.7475564660520),
              (+0.2155996640720, +0.0368438698759),
              (+0.0368438698759, +0.2155996640720),
              (+0.2155996640720, +0.7475564660520),
              (+0.7475564660520, +0.0368438698759),
              (+0.8839645740920, +0.1035756165760),
              (+0.0124598093312, +0.8839645740920),
              (+0.1035756165760, +0.0124598093312),
              (+0.0124598093312, +0.1035756165760),
              (+0.1035756165760, +0.8839645740920),
              (+0.8839645740920, +0.0124598093312)]

    elseif N == 79
        # P20. 3 negative weights, 9 points outside of the triangle
        w = [+0.016528527770800, 
             +0.000433509592831,
             +0.000433509592831,
             +0.000433509592831,
             +0.005830026358200,
             +0.005830026358200,
             +0.005830026358200,
             +0.011438468178200,
             +0.011438468178200,
             +0.011438468178200,
             +0.015224491336950,
             +0.015224491336950,
             +0.015224491336950,
             +0.015312445862700,
             +0.015312445862700,
             +0.015312445862700,
             +0.012184028838400,
             +0.012184028838400,
             +0.012184028838400,
             +0.007998716016000,
             +0.007998716016000,
             +0.007998716016000,
             +0.003849150907800,
             +0.003849150907800,
             +0.003849150907800,
             -0.000316030248744,
             -0.000316030248744,
             -0.000316030248744,
             +0.000875567150595,
             +0.000875567150595,
             +0.000875567150595,
             +0.008232919594800,
             +0.008232919594800,
             +0.008232919594800,
             +0.008232919594800,
             +0.008232919594800,
             +0.008232919594800,
             +0.002419516770245,
             +0.002419516770245,
             +0.002419516770245,
             +0.002419516770245,
             +0.002419516770245,
             +0.002419516770245,
             +0.012902453267350,
             +0.012902453267350,
             +0.012902453267350,
             +0.012902453267350,
             +0.012902453267350,
             +0.012902453267350,
             +0.004235545527220,
             +0.004235545527220,
             +0.004235545527220,
             +0.004235545527220,
             +0.004235545527220,
             +0.004235545527220,
             +0.009177457053150,
             +0.009177457053150,
             +0.009177457053150,
             +0.009177457053150,
             +0.009177457053150,
             +0.009177457053150,
             +0.000352202338954,
             +0.000352202338954,
             +0.000352202338954,
             +0.000352202338954,
             +0.000352202338954,
             +0.000352202338954,
             +0.005056342463750,
             +0.005056342463750,
             +0.005056342463750,
             +0.005056342463750,
             +0.005056342463750,
             +0.005056342463750,
             +0.001786954692975,
             +0.001786954692975,
             +0.001786954692975,
             +0.001786954692975,
             +0.001786954692975,
             +0.001786954692975]

        rs = [(+0.3333333333333, +0.3333333333333),
              (+0.5009504643520, +0.5009504643520),
              (-0.0019009287044, +0.5009504643520),
              (+0.5009504643520, -0.0019009287044),
              (+0.4882129579350, +0.4882129579350),
              (+0.0235740841305, +0.4882129579350),
              (+0.4882129579350, +0.0235740841305),
              (+0.4551366869500, +0.4551366869500),
              (+0.0897266360994, +0.4551366869500),
              (+0.4551366869500, +0.0897266360994),
              (+0.4019962593180, +0.4019962593180),
              (+0.1960074813630, +0.4019962593180),
              (+0.4019962593180, +0.1960074813630),
              (+0.2558929097590, +0.2558929097590),
              (+0.4882141804810, +0.2558929097590),
              (+0.2558929097590, +0.4882141804810),
              (+0.1764882559950, +0.1764882559950),
              (+0.6470234880100, +0.1764882559950),
              (+0.1764882559950, +0.6470234880100),
              (+0.1041708553370, +0.1041708553370),
              (+0.7916582893260, +0.1041708553370),
              (+0.1041708553370, +0.7916582893260),
              (+0.0530689638409, +0.0530689638409),
              (+0.8938620723180, +0.0530689638409),
              (+0.0530689638409, +0.8938620723180),
              (+0.0416187151960, +0.0416187151960),
              (+0.9167625696080, +0.0416187151960),
              (+0.0416187151960, +0.9167625696080),
              (+0.0115819214068, +0.0115819214068),
              (+0.9768361571860, +0.0115819214068),
              (+0.0115819214068, +0.9768361571860),
              (+0.6064026461060, +0.3448557702290),
              (+0.0487415836648, +0.6064026461060),
              (+0.3448557702290, +0.0487415836648),
              (+0.0487415836648, +0.3448557702290),
              (+0.3448557702290, +0.6064026461060),
              (+0.6064026461060, +0.0487415836648),
              (+0.6158426144570, +0.3778432695950),
              (+0.0063141159486, +0.6158426144570),
              (+0.3778432695950, +0.0063141159486),
              (+0.0063141159486, +0.3778432695950),
              (+0.3778432695950, +0.6158426144570),
              (+0.6158426144570, +0.0063141159486),
              (+0.5590480003900, +0.3066354790620),
              (+0.1343165205470, +0.5590480003900),
              (+0.3066354790620, +0.1343165205470),
              (+0.1343165205470, +0.3066354790620),
              (+0.3066354790620, +0.5590480003900),
              (+0.5590480003900, +0.1343165205470),
              (+0.7366067432630, +0.2494193627750),
              (+0.0139738939624, +0.7366067432630),
              (+0.2494193627750, +0.0139738939624),
              (+0.0139738939624, +0.2494193627750),
              (+0.2494193627750, +0.7366067432630),
              (+0.7366067432630, +0.0139738939624),
              (+0.7116751422870, +0.2127757248030),
              (+0.0755491329098, +0.7116751422870),
              (+0.2127757248030, +0.0755491329098),
              (+0.0755491329098, +0.2127757248030),
              (+0.2127757248030, +0.7116751422870),
              (+0.7116751422870, +0.0755491329098),
              (+0.8614027171550, +0.1469654360530),
              (-0.0083681532082, +0.8614027171550),
              (+0.1469654360530, -0.0083681532082),
              (-0.0083681532082, +0.1469654360530),
              (+0.1469654360530, +0.8614027171550),
              (+0.8614027171550, -0.0083681532082),
              (+0.8355869579120, +0.1377269788290),
              (+0.0266860632587, +0.8355869579120),
              (+0.1377269788290, +0.0266860632587),
              (+0.0266860632587, +0.1377269788290),
              (+0.1377269788290, +0.8355869579120),
              (+0.8355869579120, +0.0266860632587),
              (+0.9297561715570, +0.0596961091490),
              (+0.0105477192941, +0.9297561715570),
              (+0.0596961091490, +0.0105477192941),
              (+0.0105477192941, +0.0596961091490),
              (+0.0596961091490, +0.9297561715570),
              (+0.9297561715570, +0.0105477192941)]
    else
        w = T[]
        rs = Tuple{T, T}[]
    end
    return w, rs
end

function area(tri6::Triangle6{T}; N::Int64=12) where {T <: AbstractFloat}
    # Numerical integration required. Gauss-Legendre quadrature over a triangle is used.
    # Let T(r,s) be the interpolation function for tri6,
    #                             1 1-r                          N
    # A = ∬ ||∂T/∂r × ∂T/∂s||dA = ∫  ∫ ||∂T/∂r × ∂T/∂s|| ds dr = ∑ wᵢ||∂T/∂r(rᵢ,sᵢ) × ∂T/∂s(rᵢ,sᵢ)||
    #      D                      0  0                          i=1
    #
    # NOTE: for 2D, N = 12 appears to be sufficient. For 3D, N = 79 is preferred.
    w, rs = gauss_legendre_quadrature(tri6, N)
    return sum(w .* norm.([dr × ds for (dr, ds) in [derivatives(tri6, r, s) for (r, s) in rs]]))
end
# area, integrate or trianglulate.

# triangulate.
#function intersect(l::LineSegment, tri::Triangle)
#end
