# Is left 
# ---------------------------------------------------------------------------------------------
# If the point is left of the line segment in the 2D plane. 
#
# The segment's direction is from ùòÖ‚ÇÅ to ùòÖ‚ÇÇ. Let ùòÇ = ùòÖ‚ÇÇ - ùòÖ‚ÇÅ and ùòÉ = ùóΩ - ùòÖ‚ÇÅ 
# We may determine if the angle Œ∏ between the point and segment is in [0, œÄ] based on the 
# sign of ùòÇ √ó ùòÉ, since ùòÇ √ó ùòÉ = ‚ÄñùòÇ‚Äñ‚ÄñùòÉ‚Äñsin(Œ∏). 
#   ùóΩ    ^
#   ^   /
# ùòÉ |  / ùòÇ
#   | /
#   o
# We allow points on the line (ùòÇ √ó ùòÉ = 0) to be left, since this test is primarily 
# used to determine if a point is inside a polygon. A mesh is supposed to partition
# its domain, so if we do not allow points on the line, there will exist points in the 
# mesh which will not be in any face.
@inline function isleft(p::Point2D, l::LineSegment2D)
    return 0 ‚â§ l.ùòÇ √ó (p - l.ùòÖ‚ÇÅ)
end

# Is left
# ---------------------------------------------------------------------------------------------
# If the point is left of the quadratic segment in the 2D plane.
#   ùóΩ    ^
#   ^   /
# ùòÉ |  / ùòÇ
#   | /
#   o
# If the segment is straight, we can perform the isleft check with the straight
# line from the  segment's start point to the segment's end point.
# If this condition isn't met, the segment's curvature must be accounted for.
# We find the point on the curve q that is nearest point to the point of interest.
# Call this point q_near. We then perform the isleft check with the tangent vector
# of q at q_near and the vector from q_near to p, p - q_near.
function isleft(p::Point2D, q::QuadraticSegment2D)
    if isstraight(q)
        ùòÉ‚ÇÅ = q.ùòÖ‚ÇÇ - q.ùòÖ‚ÇÅ
        ùòÉ‚ÇÇ = p - q.ùòÖ‚ÇÅ
        return ùòÉ‚ÇÅ √ó ùòÉ‚ÇÇ > 0
    else
        # See nearest_point for an explanation of the math.
        # When the cubic has 3 real roots, the point must be inside the
        # curve of the segment. Meaning:
        #   If the segment curves left, the point is right.
        #   If the segment curves right, the point is left.
        # This way we save substantial time by bypassing the complex number arithmetic
        ùòÇ = q.ùòÇ
        ùòÉ = q.ùòÉ
        ùòÑ = p - q.ùòÖ‚ÇÅ
        # f‚Ä≤(r) = ar¬≥ + br¬≤ + cr + d = 0
        a = 4(ùòÇ ‚ãÖ ùòÇ)
        b = 6(ùòÇ ‚ãÖ ùòÉ)
        c = 2((ùòÉ ‚ãÖ ùòÉ) - 2(ùòÇ ‚ãÖùòÑ))
        d = -2(ùòÉ ‚ãÖ ùòÑ)
        # Lagrange's method
        e‚ÇÅ = s‚ÇÄ = -b/a
        e‚ÇÇ = c/a
        e‚ÇÉ = -d/a
        A = 2e‚ÇÅ^3 - 9e‚ÇÅ*e‚ÇÇ + 27e‚ÇÉ
        B = e‚ÇÅ^2 - 3e‚ÇÇ
        if A^2 - 4B^3 > 0 # one real root
            s‚ÇÅ = ‚àõ((A + ‚àö(A^2 - 4B^3))/2)
            if s‚ÇÅ == 0
                s‚ÇÇ = s‚ÇÅ
            else
                s‚ÇÇ = B/s‚ÇÅ
            end
            r = (s‚ÇÄ + s‚ÇÅ + s‚ÇÇ)/3
            ùòÉ‚ÇÅ = ùóó(q, r)
            ùòÉ‚ÇÇ = p - q(r)
            return ùòÉ‚ÇÅ √ó ùòÉ‚ÇÇ > 0
        else # three real roots
            return (q.ùòÖ‚ÇÇ - q.ùòÖ‚ÇÅ) √ó (q.ùòÖ‚ÇÉ - q.ùòÖ‚ÇÅ) < 0
        end
    end
end



# Nearest point
# ---------------------------------------------------------------------------------------------
# Find the point on ùóæ(r) closest to the point of interest ùòÜ.
#
# Note: r ‚àà [0, 1] is not necessarily true for this function, since it finds the minimizer
# of the function ùóæ(r), ‚àÄr ‚àà ‚Ñù
# Find r which minimizes ‚ÄñùòÜ - ùóæ(r)‚Äñ, where ùóæ(r) = r¬≤ùòÇ + rùòÉ + ùòÖ‚ÇÅ.
# This r also minimizes ‚ÄñùòÜ - ùóæ(r)‚Äñ¬≤
# It can be shown that this is equivalent to finding the minimum of the quartic function
# ‚ÄñùòÜ - ùóæ(r)‚Äñ¬≤ = f(r) = a‚ÇÑr‚Å¥ + a‚ÇÉr¬≥ + a‚ÇÇr¬≤ + a‚ÇÅr + a‚ÇÄ
# The minimum of f(r) occurs when f‚Ä≤(r) = ar¬≥ + br¬≤ + cr + d = 0, where
# ùòÑ = ùòÜ - ùòÖ‚ÇÅ, a = 4(ùòÇ ‚ãÖ ùòÇ), b = 6(ùòÇ ‚ãÖ ùòÉ), c = 2[(ùòÉ ‚ãÖ ùòÉ) - 2(ùòÇ ‚ãÖùòÑ)], d = -2(ùòÉ ‚ãÖ ùòÑ)
# Lagrange's method (https://en.wikipedia.org/wiki/Cubic_equation#Lagrange's_method)
# is used to find the roots.
function nearest_point(p::Point{Dim,T}, q::QuadraticSegment) where {Dim,T}
    ùòÇ = q.ùòÇ
    ùòÉ = q.ùòÉ
    ùòÑ = p - q.ùòÖ‚ÇÅ
    # f‚Ä≤(r) = ar¬≥ + br¬≤ + cr + d = 0
    a = 4(ùòÇ ‚ãÖ ùòÇ)
    b = 6(ùòÇ ‚ãÖ ùòÉ)
    c = 2((ùòÉ ‚ãÖ ùòÉ) - 2(ùòÇ ‚ãÖùòÑ))
    d = -2(ùòÉ ‚ãÖ ùòÑ)
    # Lagrange's method
    e‚ÇÅ = s‚ÇÄ = -b/a
    e‚ÇÇ = c/a
    e‚ÇÉ = -d/a
    A = 2e‚ÇÅ^3 - 9e‚ÇÅ*e‚ÇÇ + 27e‚ÇÉ
    B = e‚ÇÅ^2 - 3e‚ÇÇ
    if A^2 - 4B^3 > 0 # one real root
        s‚ÇÅ = ‚àõ((A + ‚àö(A^2 - 4B^3))/2)
        if s‚ÇÅ == 0
            s‚ÇÇ = s‚ÇÅ
        else
            s‚ÇÇ = B/s‚ÇÅ
        end
        r = (s‚ÇÄ + s‚ÇÅ + s‚ÇÇ)/3
        return r, q(r)
    else # three real roots
        # Complex cube root
        t‚ÇÅ = exp(log((A + ‚àö(complex(A^2 - 4B^3)))/2)/3)
        if t‚ÇÅ == 0
            t‚ÇÇ = t‚ÇÅ
        else
            t‚ÇÇ = B/t‚ÇÅ
        end
        Œ∂‚ÇÅ = Complex{T}(-1/2, ‚àö3/2)
        Œ∂‚ÇÇ = conj(Œ∂‚ÇÅ)
        dist_min = typemax(T)
        r_near = zero(T)
        p_near = nan(Point{Dim,T})
        # Use the real part of each root
        for r·µ¢ in (real((s‚ÇÄ +    t‚ÇÅ +    t‚ÇÇ)/3),
                   real((s‚ÇÄ + Œ∂‚ÇÇ*t‚ÇÅ + Œ∂‚ÇÅ*t‚ÇÇ)/3),
                   real((s‚ÇÄ + Œ∂‚ÇÅ*t‚ÇÅ + Œ∂‚ÇÇ*t‚ÇÇ)/3))
            p·µ¢ = q(r·µ¢)
            dist = distance¬≤(p·µ¢, p)
            if dist < dist_min
                dist_min = dist
                r_near = r·µ¢
                p_near = p·µ¢
            end
        end
        return r_near, p_near
    end
end


# Hyperplane 
# ---------------------------------------------------------------------------------------------
Base.in(p::Point, plane::Hyperplane) = p.coord ‚ãÖ plane.ùóª ‚âà plane.d
in_halfspace(p::Point, plane::Hyperplane) = p.coord ‚ãÖ plane.ùóª - plane.d ‚â• 0

# Given a point p and line l that lie in the plane. Check that the point is left of the line
function isleft(p::Point3D, l::LineSegment3D, plane::Hyperplane3D)
    # Since p and l ‚àà plane, l.ùòÇ √ó (p - l.ùòÖ‚ÇÅ) must either by in the exact same direction
    # as plane.ùóª or the exact opposite direction. If the direction is the same, the point
    # is left of the line.
    return 0 ‚â§ (l.ùòÇ √ó (p - l.ùòÖ‚ÇÅ)) ‚ãÖ plane.ùóª
end

# AABox 
# ---------------------------------------------------------------------------------------------
@inline Base.in(p::Point2D, aab::AABox2D) = aab.xmin ‚â§ p[1] ‚â§ aab.xmax && 
                                            aab.ymin ‚â§ p[2] ‚â§ aab.ymax
@inline Base.in(p::Point3D, aab::AABox3D) = aab.xmin ‚â§ p[1] ‚â§ aab.xmax && 
                                            aab.ymin ‚â§ p[2] ‚â§ aab.ymax &&
                                            aab.zmin ‚â§ p[3] ‚â§ aab.zmax
# Point inside polygon
# ---------------------------------------------------------------------------------------------
# Test if a point is in a polygon for 2D points/polygons
function Base.in(p::Point2D, poly::Polygon{N, 2}) where {N}
    # Test if the point is to the left of each edge. 
    for i ‚àà 1:N-1
        isleft(p, LineSegment2D(poly[i], poly[i + 1])) || return false
    end
    return isleft(p, LineSegment2D(poly[N], poly[1]))
end
# Not necessarily planar
#function Base.in(p::Point3D, poly::Polygon{N, 3}) where {N}
#    # Check if the point is even in the same plane as the polygon
#    plane = Hyperplane(poly[1], poly[2], poly[3])
#    p ‚àà plane || return false
#    # Test that the point is to the left of each edge, oriented to the plane
#    for i = 1:N-1
#        isleft(p, LineSegment3D(poly[i], poly[i + 1]), plane) || return false
#    end
#    return isleft(p, LineSegment3D(poly[N], poly[1]), plane) 
#end
#




# Point inside triangle 
# ---------------------------------------------------------------------------------------------
function Base.in(p::Point3D, tri::Triangle3D)
    # P ‚àà ABC iff the surface normals of CCW triangles PAB, PBC, & PCA are equal.
    ùóÆ = tri[1] - p
    ùóØ = tri[2] - p
    ùó∞ = tri[3] - p
    ùóª‚ÇÅ= ùóÆ √ó ùóØ 
    ùóª‚ÇÇ= ùóØ √ó ùó∞
    d‚ÇÅ‚ÇÇ = ùóª‚ÇÅ ‚ãÖ ùóª‚ÇÇ
    # Test the normals point the same direction relative to each other
    # and that surface normals are equivalent using ùóªÃÇ ‚ãÖ ùóªÃÇ = 1
    # d‚ÇÅ‚ÇÇ > 0 is redundant if the point is in the triangle, but it is a very 
    # fast check that the point is in the plane of the triangle.
    (d‚ÇÅ‚ÇÇ > 0 && d‚ÇÅ‚ÇÇ ‚âà norm(ùóª‚ÇÅ)*norm(ùóª‚ÇÇ)) || return false
    # We need only check the direction of the norm of the last triangle to 
    # prove that the point is in the triangle
    return ùóª‚ÇÇ ‚ãÖ(ùó∞ √ó ùóÆ) > 0 
end

# This performs much better than the default routine, which is logically equivalent.
# Better simd this way? Chaining isleft doesn't have the same performance improvement for
# triangles.
function Base.in(p::Point2D, quad::Quadrilateral2D)
    return isleft(p, LineSegment2D(quad[1], quad[2])) &&
           isleft(p, LineSegment2D(quad[2], quad[3])) &&
           isleft(p, LineSegment2D(quad[3], quad[4])) &&
           isleft(p, LineSegment2D(quad[4], quad[1]))
end

# Test if a 2D point is in a 2D quadratic polygon
function Base.in(p::Point2D, poly::QuadraticPolygon{N, 2, T}) where {N, T}
    # Test if the point is to the left of each edge. 
    bool = true
    M = N √∑ 2
    for i ‚àà 1:M-1
        if !isleft(p, QuadraticSegment2D(poly[i], poly[i + 1], poly[i + M]))
            return false
        end
    end
    return isleft(p, QuadraticSegment2D(poly[M], poly[1], poly[N]))
end
