Consolidate FaceVertexMesh

parallel
  threads
    histogram
    sortPermutation
    boundingBox(Vector<Point>)
    boundingBox(Mesh)
  GPU

Identify par functions
  mesh
  physics
  mpact
  ray_casting
  visualization

Stack of todo:
  Generate images of line segments
  Generate modular rays and visualize to verify 
  Benchmark intersection using modular rays
  Benchmark intersection for pointer arithmetic version of intersect
  Morton sort for mesh
  Benchmark morton sorted vs unsorted intersection
  Benchmark using insertion sort vs std::sort on morton sorted mesh vs unsorted
  Benchmark insertion vs non-insertion and morton vs non-morton for binned and non-binned

Alternative stack:
  FaceVertexMesh.getUniqueEdges
  FaceVertexMesh.getUniqueEdgeLengths
  histogram for mesh
  histogram for mesh by material
  histogram of spatial partition

Change functions returning a vector to accept a vector by reference and resize
  just getFaceAreas

Make the C API functions for the spatial partition into member functions of the partition

Benchmark for SpatialPartition model of VERA 2A -> find face and RT

Print histogram of mesh edge lengths and face areas.
Print for each material

// GPU version of intersection
//   Just transfer the mesh to the GPU and do operations there
// 
// apply permutation test

nolints/cppchecks make sure all are justified
Check pragma diagnostic push/pop
