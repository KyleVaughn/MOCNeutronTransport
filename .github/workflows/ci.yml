name: CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

env:
  HDF5_ROOT: /usr

jobs:
  main:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: true
      matrix:
        compiler: [ gcc, clang ]
        build_type: [ Debug, Release ]
        openmp: [ ON, OFF]
        dev_mode: [ ON, OFF ]
        gmsh: [ ON, OFF ]
          #PAR_STL
          #INT64

    name: "${{ matrix.compiler }},${{ matrix.build_type }},OMP=${{ matrix.openmp }},Dev=${{ matrix.dev_mode }}"

    steps:
      - uses: actions/checkout@v3

      - name: Apt dependencies
        shell: bash
        run: |
          sudo apt -y update
          sudo apt install -y libhdf5-dev \
                              libpugixml-dev

      - name: gcc
        shell: bash
        if: matrix.compiler == 'gcc'
        run: |
          sudo apt install -y gcc-12 g++-12
          echo "CC=gcc-12" >> $GITHUB_ENV
          echo "CXX=g++-12" >> $GITHUB_ENV

      - name: Dev mode dependencies
        shell: bash
        if: matrix.dev_mode == 'ON'
        run: |
          sudo apt install -y llvm-15 cppcheck

      - name: clang
        shell: bash
        if: matrix.compiler == 'clang'
        run: |
          sudo apt install -y clang-15
          echo "CC=clang-15" >> $GITHUB_ENV
          echo "CXX=clang++-15" >> $GITHUB_ENV

      - name: OpenMP
        shell: bash
        if: matrix.openmp == 'ON'
        run: sudo apt install -y libomp-15-dev

      - name: Gmsh
        shell: bash
        if: matrix.gmsh = 'ON'
        run: |
          wget https://gmsh.info/bin/Linux/gmsh-4.11.1-Linux64-sdk.tgz
          tar -xzvf gmsh-4.11.1-Linux64-sdk.tgz
          echo "GMSH_ROOT=${PWD}/gmsh-4.11.1-Linux64-sdk" >> $GITHUB_ENV

          #      - name: Vis
          #        shell: bash
          #        if: matrix.vis == 'ON'
          #        run: sudo apt install -y xorg-dev libgl1-mesa-dev

      - name: Configure and build
        run: |
          cmake -S . -B build \
                -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                -DUM2_ENABLE_OPENMP=${{ matrix.openmp }} \
                -DUM2_DEV_MODE=${{ matrix.dev_mode }} \
                -DUM2_ENABLE_GMSH=${{ matrix.gmsh }} \
                -DUM2_ENABLE_CUDA=OFF \
          make -j -C build

      - name: Format check
        if: matrix.dev_mode == 'ON'
        run: make -C build format-check

      - name: Run tests
        run:
          make -j -C build test

      - name: Upload coverage
        if: matrix.dev_mode == 'ON' && matrix.build_type == 'Debug'  && matrix.compiler == 'gcc'
        run: |
          sudo apt install -y python3 python3-pip
          python3 -m pip install --upgrade pip
          python3 -m pip install cpp-coveralls
          coveralls -e cmake-build-debug/ -e env/ -e scripts/ -e tpls/ --gcov /usr/bin/gcov-12
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
