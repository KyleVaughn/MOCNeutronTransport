Finish MPACT io test -> Check full model parameters

rescue vis

tests for gmsh overlay grid

test for gmsh mesh functions

Finish Gmsh model functions for model creation

enable OMP/TBB -> But where?

build UM2 without gmsh for MPACT

docs
tutorial
models

split by assembly, lattice, etc. allow each to be read as model

make model.writeXDMFFile private
MPACT model from polytopesoup

Definitely need a more efficient read/write for mpact model

VERA 1A

write MPACT XDMF with mpact input file

clang format directories

TESTS:
  gmsh
    model
      fragment 3d
        Copy the 2D tests
      intersect 3d
        Copy the 2D tests
      overlayCoarseGrid
        Check physical group names and entities.
        Check 2D and 3D models
  mesh
    regular_partition
      getChild
    rectiliner_partition
      getChild
    FVM
      quad
      tri6
      quad8

gmsh io no allocations

Vector versions of gmsh funcinos
  -> If user space, yes.

move on to next dir and save powers and such for spatial partition

min_element, max_element using
  - algroithmica argmin https://en.algorithmica.org/hpc/algorithms/argmin/

faceContaining find closest vertex, then test neighboring faces
  - speed up for linear vs quadratic
  - speed up for about 100 vs 1000 elems
  - can use VERY WIDE SIMD to compure distance
  - algroithmica argmin https://en.algorithmica.org/hpc/algorithms/argmin/

tagged union/variant for tri/quad mesh

binned face vertex mesh fixes everything
-> Output ratio of areas of cells

learn more floating point

Int64

organze archive into many dirs with notes on what is there any why we keep

enable openMP /TBB

NOLINT
  stdlib
  common
  math
  geometry

push_back to emplace_back
  Make another item with this for later

add testing for gcc 12+ and clang15+

look for ASSUME opportunities, especially around ternary statements

ray intersect regular grid?

provide intersection functions with additional argument of inverse direction?

Check that casts preserve value from float to int
-> int over 16 million?

Harden the mesh IO, testing with files created from different software

VTK output with colors

is_constexpr -> builtin

constexpr tests

CUDA check

PURE and ASSERTS/Log messages
  -> ASSERT Ok
  -> Log no

valgrind and cuda test on laptop

allocator

Apache 2.0 license

std::isfinite assumes
Find the conditional jump that depends on uninitialized value in xsec read

Add material convenience functions that openMC has

Function for plotting XSecs

Check that tests are actually using CUDA

No more examples. Make a "models" directory.
  Add options for each parametric study

investigate valgrind release build -> UPGRADE to 3.22
-> PURE, ASSUME

Add scattering matrix to Xsec

Don't store redundant info? Total
  Optimize to be lower triangular when build without upscatter?

Move the picture of the model to above the code in the tutorial

Resolve casts in gmsh API

Modify the Gmsh functions so that they are templated where necessary

Binned mesh
  Need vis before to verify

Back the rays up by -eps
  -> or make AABB bigger

SIMD versions of routines for mesh.
  point in 4 AABB
  ray intersect 4 lines, etc.

SIMD ray/mesh intersection. Can do many at once. Make RayPacket class. Write intersection
routines for edge, polygon, etc.

GPU ray intersect. Need an easy way to get objects on the device. Maybe toDevice() return

Functions to prevent std::string/std::vector usage in examples and tutorials
  One should bundle functions to hide complexity

Re-add the requirements non-spack installed

Scripts to install gcc

parallelize

Graphics:
  Highlight the intersected cells
    Show ray intersect lattice naive gif. Faces are out of order.
    Show ray intersect lattice morton sorted gif. Better memory access
    Show ray intersect binned lattice. Highlight the box edges and then highlight
      tested faces.
    Show the number of intersected faces each time and the speedup

Restore scripts dir

clean archive

Point in cell bug for c5g7 mesh

Consistent testing of mesh point inside.
   getOrientedEdge -> return bool, pass edge by ref

Binned FVM
  check ray tracing by intersecting the binned and non-binned versions.
  The ray tracing info should be the same.
  Can robustly test this using modular rays

toBuffer for geometry

write mpact model to make mpact input
  -> materials

Matplotlib

Setup performance tracking of key functions. 
  Run benchmarks and track times
  Track regression

ModularRayParams to 3D

CAD/CSG
  Add 

Interactive visualization (openGL)
  Implement like old Julia Makie
  Decompose to lines and triangles

FVM
  -> Implement edge to edge intersection
  -> Implement faceContaining by finding the vertex closest to the point first
  -> Warn about vertices that are within eps in "validate()"

bump gmsh version
-> Only enable some of OCC

Restore the Make scripts for build dependencies 
