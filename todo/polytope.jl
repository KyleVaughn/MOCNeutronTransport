# -- Accessors --

vertices(p::Polytope) = p.vertices

peaks(p::Polytope{3}) = vertices(p)

ridges(p::Polytope{2}) = vertices(p)
ridges(p::Polytope{3}) = edges(p)

facets(p::Polytope{1}) = vertices(p)
facets(p::Polytope{2}) = edges(p)
facets(p::Polytope{3}) = faces(p)


## If we think of the polytopes as sets, p‚ÇÅ ‚à© p‚ÇÇ = p‚ÇÅ and p‚ÇÅ ‚à© p‚ÇÇ = p‚ÇÇ implies p‚ÇÅ = p‚ÇÇ
#function Base.:(==)(l‚ÇÅ::LineSegment{T}, l‚ÇÇ::LineSegment{T}) where {T}
#    return (l‚ÇÅ[1] === l‚ÇÇ[1] && l‚ÇÅ[2] === l‚ÇÇ[2]) ||
#           (l‚ÇÅ[1] === l‚ÇÇ[2] && l‚ÇÅ[2] === l‚ÇÇ[1])
#end
#Base.:(==)(t‚ÇÅ::Triangle, t‚ÇÇ::Triangle) = return all(v -> v ‚àà t‚ÇÇ.vertices, t‚ÇÅ.vertices)
#Base.:(==)(t‚ÇÅ::Tetrahedron, t‚ÇÇ::Tetrahedron) = return all(v -> v ‚àà t‚ÇÇ.vertices, t‚ÇÅ.vertices)
#function Base.:(==)(q‚ÇÅ::QuadraticSegment{T}, q‚ÇÇ::QuadraticSegment{T}) where {T}
#    return q‚ÇÅ[3] === q‚ÇÇ[3] &&
#           (q‚ÇÅ[1] === q‚ÇÇ[1] && q‚ÇÅ[2] === q‚ÇÇ[2]) ||
#           (q‚ÇÅ[1] === q‚ÇÇ[2] && q‚ÇÅ[2] === q‚ÇÇ[1])
#end

#isstraight(::LineSegment) = true
#
#"""
#    isstraight(q::QuadraticSegment)
#
#Return if the quadratic segment is effectively straight.
#(If P‚ÇÉ is at most EPS_POINT distance from LineSegment(P‚ÇÅ,P‚ÇÇ))
#"""
#function isstraight(q::QuadraticSegment{T}) where {T <: Point}
#    # Project P‚ÇÉ onto the line from P‚ÇÅ to P‚ÇÇ, call it P‚ÇÑ
#    ùòÉ‚ÇÅ‚ÇÉ = q[3] - q[1]
#    ùòÉ‚ÇÅ‚ÇÇ = q[2] - q[1]
#    v‚ÇÅ‚ÇÇ = norm¬≤(ùòÉ‚ÇÅ‚ÇÇ)
#    ùòÉ‚ÇÅ‚ÇÑ = (ùòÉ‚ÇÅ‚ÇÉ ‚ãÖ ùòÉ‚ÇÅ‚ÇÇ) * inv(v‚ÇÅ‚ÇÇ) * ùòÉ‚ÇÅ‚ÇÇ
#    # Determine the distance from P‚ÇÉ to P‚ÇÑ (P‚ÇÑ - P‚ÇÉ = P‚ÇÅ + ùòÉ‚ÇÅ‚ÇÑ - P‚ÇÉ = ùòÉ‚ÇÅ‚ÇÑ - ùòÉ‚ÇÅ‚ÇÉ)
#    d¬≤ = norm¬≤(ùòÉ‚ÇÅ‚ÇÑ - ùòÉ‚ÇÅ‚ÇÉ)
#    return d¬≤ < T(EPS_POINT^2)
#end
