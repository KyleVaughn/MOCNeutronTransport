using MOCNeutronTransport
@testset "LineSegment1D" begin
    for F in [Float32, Float64, BigFloat]
        @testset "Constructors" begin
            p‚ÇÅ = Point(F(1))
            p‚ÇÇ = Point(F(2))
            l = LineSegment1D(p‚ÇÅ, p‚ÇÇ)
            @test l.ùòÖ‚ÇÅ== p‚ÇÅ
            @test l.ùòÇ == p‚ÇÇ - p‚ÇÅ
        end
        @testset "Methods" begin
            # interpolation
            p‚ÇÅ = Point(F(1))
            p‚ÇÇ = Point(F(3))
            l = LineSegment1D(p‚ÇÅ, p‚ÇÇ)
            @test l(0) ‚âà p‚ÇÅ
            @test l(1) ‚âà p‚ÇÇ
            @test l(1//2) ‚âà Point(F(2))

            # arclength
            p‚ÇÅ = Point(F(1))
            p‚ÇÇ = Point(F(2))
            l = LineSegment1D(p‚ÇÅ, p‚ÇÇ)
            @test arclength(l) ‚âà 1
            @test typeof(arclength(l)) == F

            # intersect
            # (‚ÇÇ--(‚ÇÅ------‚ÇÇ)--‚ÇÅ)
            l‚ÇÅ = LineSegment1D(Point(F(1)), Point(F(3)))
            l‚ÇÇ = LineSegment1D(Point(F(0)), Point(F(2)))
            bool, l = intersect(l‚ÇÅ, l‚ÇÇ)
            @test bool
            @test l(0) ‚âà Point(F(1))
            @test l(1) ‚âà Point(F(2))
            # (‚ÇÅ--(‚ÇÇ------‚ÇÅ)--‚ÇÇ)
            l‚ÇÇ = LineSegment1D(Point(F(1)), Point(F(3)))
            l‚ÇÅ = LineSegment1D(Point(F(0)), Point(F(2)))
            bool, l = intersect(l‚ÇÅ, l‚ÇÇ)
            @test bool
            @test l(0) ‚âà Point(F(1))
            @test l(1) ‚âà Point(F(2))
            # (‚ÇÅ--(‚ÇÇ------‚ÇÇ)--‚ÇÅ)
            l‚ÇÅ = LineSegment1D(Point(F(0)), Point(F(3)))
            l‚ÇÇ = LineSegment1D(Point(F(1)), Point(F(2)))
            bool, l = intersect(l‚ÇÅ, l‚ÇÇ)
            @test bool
            @test l(0) ‚âà Point(F(1))
            @test l(1) ‚âà Point(F(2))
            # (‚ÇÇ--(‚ÇÅ------‚ÇÅ)--‚ÇÇ)
            l‚ÇÇ = LineSegment1D(Point(F(0)), Point(F(3)))
            l‚ÇÅ = LineSegment1D(Point(F(1)), Point(F(2)))
            bool, l = intersect(l‚ÇÅ, l‚ÇÇ)
            @test bool
            @test l(0) ‚âà Point(F(1))
            @test l(1) ‚âà Point(F(2))
        end
    end
end

@testset "LineSegment2D" begin
    for F in [Float32, Float64, BigFloat]
        @testset "Constructors" begin
            p‚ÇÅ = Point2D{F}(1, 0)
            p‚ÇÇ = Point2D{F}(2, 0)
            l = LineSegment2D(p‚ÇÅ, p‚ÇÇ)
            @test l.ùòÖ‚ÇÅ== p‚ÇÅ
            @test l.ùòÇ == p‚ÇÇ - p‚ÇÅ
        end
        @testset "Methods" begin
            # interpolation
            p‚ÇÅ = Point2D{F}(1, 1)
            p‚ÇÇ = Point2D{F}(3, 3)
            l = LineSegment2D(p‚ÇÅ, p‚ÇÇ)
            @test l(0) ‚âà p‚ÇÅ
            @test l(1) ‚âà p‚ÇÇ
            @test l(1//2) ‚âà Point2D{F}(2, 2)

            # arclength
            p‚ÇÅ = Point2D{F}(1, 2)
            p‚ÇÇ = Point2D{F}(2, 4)
            l = LineSegment2D(p‚ÇÅ, p‚ÇÇ)
            @test arclength(l) ‚âà sqrt(5)
            @test typeof(arclength(l)) == F

            # intersect
            # -------------------------------------------
            # basic intersection
            l‚ÇÅ = LineSegment2D(Point2D{F}(0,  1), Point2D{F}(2, -1))
            l‚ÇÇ = LineSegment2D(Point2D{F}(0, -1), Point2D{F}(2,  1))
            hit, p‚ÇÅ = intersect(l‚ÇÅ, l‚ÇÇ)
            @test hit
            @test p‚ÇÅ ‚âà Point2D{F}(1, 0)
            @test typeof(p‚ÇÅ) == Point2D{F}

            # vertex intersection
            l‚ÇÇ = LineSegment2D(Point2D{F}(0, -1), Point2D{F}(2, -1))
            hit, p‚ÇÅ = l‚ÇÅ ‚à© l‚ÇÇ
            @test hit
            @test p‚ÇÅ ‚âà Point2D{F}(2, -1)

            # vertical
            l‚ÇÅ = LineSegment2D(Point2D{F}(0,  1), Point2D{F}(2,   1))
            l‚ÇÇ = LineSegment2D(Point2D{F}(1, 10), Point2D{F}(1, -10))
            hit, p‚ÇÅ = intersect(l‚ÇÅ, l‚ÇÇ)
            @test hit
            @test p‚ÇÅ ‚âà Point2D{F}(1, 1)

            # nearly vertical
            l‚ÇÅ = LineSegment2D(Point2D{F}(-1, -100000), Point2D{F}(1,  100000))
            l‚ÇÇ = LineSegment2D(Point2D{F}(-1,   10000), Point2D{F}(1,  -10000))
            hit, p‚ÇÅ = l‚ÇÅ ‚à© l‚ÇÇ
            @test hit
            @test p‚ÇÅ ‚âà Point2D{F}(0, 0)

            # parallel
            l‚ÇÅ = LineSegment2D(Point2D{F}(0, 1), Point2D{F}(1, 1))
            l‚ÇÇ = LineSegment2D(Point2D{F}(0, 0), Point2D{F}(1, 0))
            hit, p‚ÇÅ = intersect(l‚ÇÅ, l‚ÇÇ)
            @test !hit

            # collinear
            l‚ÇÅ = LineSegment2D(Point2D{F}(0, 0), Point2D{F}(2, 0))
            l‚ÇÇ = LineSegment2D(Point2D{F}(0, 0), Point2D{F}(1, 0))
            hit, p‚ÇÅ = intersect(l‚ÇÅ, l‚ÇÇ)
            @test !hit

            # line intersects, not segment (invalid s)
            l‚ÇÅ = LineSegment2D(Point2D{F}(0, 0), Point2D{F}(2, 0    ))
            l‚ÇÇ = LineSegment2D(Point2D{F}(1, 2), Point2D{F}(1, 1//10))
            hit, p‚ÇÅ = l‚ÇÅ ‚à© l‚ÇÇ
            @test !hit

            # line intersects, not segment (invalid r)
            l‚ÇÇ = LineSegment2D(Point2D{F}(0, 0), Point2D{F}(2, 0    ))
            l‚ÇÅ = LineSegment2D(Point2D{F}(1, 2), Point2D{F}(1, 1//10))
            hit, p‚ÇÅ = intersect(l‚ÇÅ, l‚ÇÇ)
            @test !hit

            # isleft
            l = LineSegment2D(Point2D{F}(0, 0), Point2D{F}(1, 0))
            @test isleft(Point2D{F}(0, 1) , l)
            @test !isleft(Point2D{F}(0, -1) , l)
            @test !isleft(Point2D{F}(0, -1e-6) , l)
            @test isleft(Point2D{F}(0, 1e-6) , l)
            @test isleft(Point2D{F}(0.5, 0) , l)

            # sort_intersection_points
            l = LineSegment2D(Point2D{F}(0,0), Point2D{F}(10,0))
            p‚ÇÅ = Point2D{F}(1, 0)
            p‚ÇÇ = Point2D{F}(2, 0)
            p‚ÇÉ = Point2D{F}(3, 0)
            points = [p‚ÇÉ, p‚ÇÅ, p‚ÇÇ, Point2D{F}(1 + 1//1000000, 0)]
            sort_intersection_points!(l, points)
            @test points[1] == p‚ÇÅ
            @test points[2] == p‚ÇÇ
            @test points[3] == p‚ÇÉ
        end
    end
end

@testset "LineSegment3D" begin
    for F in [Float32, Float64, BigFloat]
        @testset "Constructors" begin
            p‚ÇÅ = Point3D{F}(1, 0, 1)
            p‚ÇÇ = Point3D{F}(2, 0, -1)
            l = LineSegment3D(p‚ÇÅ, p‚ÇÇ)
            @test l.ùòÖ‚ÇÅ== p‚ÇÅ
            @test l.ùòÇ == p‚ÇÇ - p‚ÇÅ
        end
        @testset "Methods" begin
            # interpolation
            p‚ÇÅ = Point3D{F}(1, 1, 1)
            p‚ÇÇ = Point3D{F}(3, 3, 3)
            l = LineSegment3D(p‚ÇÅ, p‚ÇÇ)
            @test l(0) ‚âà p‚ÇÅ
            @test l(1) ‚âà p‚ÇÇ
            @test l(1//2) ‚âà Point3D{F}(2, 2, 2)

            # arclength
            p‚ÇÅ = Point3D{F}(1, 2, 3)
            p‚ÇÇ = Point3D{F}(2, 4, 6)
            l = LineSegment3D(p‚ÇÅ, p‚ÇÇ)
            @test arclength(l) ‚âà sqrt(14)

            # intersect
            l‚ÇÅ = LineSegment3D(Point3D{F}(0,  1, 0), Point3D{F}(2, -1, 0))
            l‚ÇÇ = LineSegment3D(Point3D{F}(0, -1, 0), Point3D{F}(2,  1, 0))
            hit, p‚ÇÅ = intersect(l‚ÇÅ, l‚ÇÇ)
            @test hit
            @test p‚ÇÅ ‚âà Point3D{F}(1, 0, 0)
            @test typeof(p‚ÇÅ) == Point3D{F}

            # sort_intersection_points
            l = LineSegment3D(Point3D{F}(0,0,0), Point3D{F}(10,0,0))
            p‚ÇÅ = Point3D{F}(1, 0, 0)
            p‚ÇÇ = Point3D{F}(2, 0, 0)
            p‚ÇÉ = Point3D{F}(3, 0, 0)
            points = [p‚ÇÉ, p‚ÇÅ, p‚ÇÇ, Point3D{F}(1 + 1//1000000, 0, 0)]
            sort_intersection_points!(l, points)
            @test points[1] == p‚ÇÅ
            @test points[2] == p‚ÇÇ
            @test points[3] == p‚ÇÉ
        end
    end
end
