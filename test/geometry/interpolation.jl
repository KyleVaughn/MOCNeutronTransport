@testset "Interpolation" begin
    @testset "LineSegment" begin
        for T in [Float32, Float64, BigFloat]
            p‚ÇÅ = Point3D{T}(1, 1, 1)
            p‚ÇÇ = Point3D{T}(3, 3, 3)
            l = LineSegment(p‚ÇÅ, p‚ÇÇ)
            @test l(0) ‚âà p‚ÇÅ
            @test l(1) ‚âà p‚ÇÇ
            @test l(1//2) ‚âà Point3D{T}(2, 2, 2)
        end
    end

    @testset "QuadraticSegment" begin
        for T in [Float32, Float64, BigFloat]
            ùòÖ‚ÇÅ = Point3D{T}(0, 0, 0)
            ùòÖ‚ÇÇ = Point3D{T}(2, 0, 0)
            ùòÖ‚ÇÉ = Point3D{T}(1, 1, 0)
            q = QuadraticSegment(ùòÖ‚ÇÅ, ùòÖ‚ÇÇ, ùòÖ‚ÇÉ)
            for r = LinRange{T}(0, 1, 5)
                @test q(r) ‚âà Point3D{T}(2r, -(2r)^2 + 4r, 0)
            end
        end
    end

    @testset "Triangle" begin
        for T in [Float32, Float64, BigFloat]
            p‚ÇÅ = Point3D{T}(0, 0, 0)
            p‚ÇÇ = Point3D{T}(0, 1, 0)
            p‚ÇÉ = Point3D{T}(0, 0, 1)
            tri = Triangle(p‚ÇÅ, p‚ÇÇ, p‚ÇÉ)
            @test tri(0, 0) ‚âà p‚ÇÅ
            @test tri(1, 0) ‚âà p‚ÇÇ
            @test tri(0, 1) ‚âà p‚ÇÉ
            @test tri(1//2, 1//2) ‚âà Point3D{T}(0, 1//2, 1//2)
        end
    end

    @testset "Quadrilateral" begin
        for T in [Float32, Float64, BigFloat]
            p‚ÇÅ = Point3D{T}(0, 0, 0)
            p‚ÇÇ = Point3D{T}(0, 1, 0)
            p‚ÇÉ = Point3D{T}(0, 1, 1)
            p‚ÇÑ = Point3D{T}(0, 0, 1)
            quad = Quadrilateral(p‚ÇÅ, p‚ÇÇ, p‚ÇÉ, p‚ÇÑ)
            @test quad(0, 0) ‚âà p‚ÇÅ
            @test quad(1, 0) ‚âà p‚ÇÇ
            @test quad(1, 1) ‚âà p‚ÇÉ
            @test quad(0, 1) ‚âà p‚ÇÑ
            @test quad(1//2, 1//2) ‚âà Point3D{T}(0, 1//2, 1//2)
        end
    end

    @testset "QuadraticTriangle" begin
        for T in [Float32, Float64, BigFloat]
            p‚ÇÅ = Point3D{T}(0, 0, 0)
            p‚ÇÇ = Point3D{T}(0, 1, 0)
            p‚ÇÉ = Point3D{T}(0, 1, 1)
            p‚ÇÑ = Point3D{T}(0, 1//2, 0)
            p‚ÇÖ = Point3D{T}(0, 1, 1//2)
            p‚ÇÜ = Point3D{T}(0, 1//2, 1//2)
            tri6 = QuadraticTriangle(p‚ÇÅ, p‚ÇÇ, p‚ÇÉ, p‚ÇÑ, p‚ÇÖ, p‚ÇÜ)
            @test tri6(0, 0) ‚âà p‚ÇÅ
            @test tri6(1, 0) ‚âà p‚ÇÇ
            @test tri6(0, 1) ‚âà p‚ÇÉ
            @test tri6(1//2, 0) ‚âà p‚ÇÑ
            @test tri6(1//2, 1//2) ‚âà p‚ÇÖ
            @test tri6(0, 1//2) ‚âà p‚ÇÜ
        end
    end

    @testset "QuadraticQuadrilateral" begin
        for T in [Float32, Float64, BigFloat]
            p‚ÇÅ = Point3D{T}(0, 0, 0)
            p‚ÇÇ = Point3D{T}(0, 1, 0)
            p‚ÇÉ = Point3D{T}(0, 1, 1)
            p‚ÇÑ = Point3D{T}(0, 0, 1)
            p‚ÇÖ = Point3D{T}(0, 1//2,    0)
            p‚ÇÜ = Point3D{T}(0,    1, 1//2)
            p‚Çá = Point3D{T}(0, 1//2,    1)
            p‚Çà = Point3D{T}(0,    0, 1//2)
            quad8 = QuadraticQuadrilateral(p‚ÇÅ, p‚ÇÇ, p‚ÇÉ, p‚ÇÑ, p‚ÇÖ, p‚ÇÜ, p‚Çá, p‚Çà)
            @test quad8(0, 0) ‚âà p‚ÇÅ
            @test quad8(1, 0) ‚âà p‚ÇÇ
            @test quad8(1, 1) ‚âà p‚ÇÉ
            @test quad8(0, 1) ‚âà p‚ÇÑ
            @test quad8(1//2,    0) ‚âà p‚ÇÖ
            @test quad8(   1, 1//2) ‚âà p‚ÇÜ
            @test quad8(1//2,    1) ‚âà p‚Çá
            @test quad8(   0, 1//2) ‚âà p‚Çà
            @test quad8(1//2, 1//2) ‚âà Point3D{T}(0, 1//2, 1//2)
        end
    end

    @testset "Tetrahedron" begin
        for T in [Float32, Float64, BigFloat]
            p‚ÇÅ = Point3D{T}(0, 0, 0)           
            p‚ÇÇ = Point3D{T}(1, 0, 0)
            p‚ÇÉ = Point3D{T}(0, 1, 0)
            p‚ÇÑ = Point3D{T}(0, 0, 1)
            tet = Tetrahedron(p‚ÇÅ, p‚ÇÇ, p‚ÇÉ, p‚ÇÑ)
            @test tet(0, 0, 0) ‚âà p‚ÇÅ
            @test tet(1, 0, 0) ‚âà p‚ÇÇ
            @test tet(0, 1, 0) ‚âà p‚ÇÉ
            @test tet(0, 0, 1) ‚âà p‚ÇÑ
        end
    end

    @testset "Hexahedron" begin
        for T in [Float32, Float64, BigFloat]
            p‚ÇÅ = Point3D{T}(0, 0, 0)
            p‚ÇÇ = Point3D{T}(1, 0, 0)
            p‚ÇÉ = Point3D{T}(0, 1, 0)
            p‚ÇÑ = Point3D{T}(1, 1, 0)
            p‚ÇÖ = Point3D{T}(0, 0, 1)
            p‚ÇÜ = Point3D{T}(1, 0, 1)
            p‚Çá = Point3D{T}(0, 1, 1)
            p‚Çà = Point3D{T}(1, 1, 1)
            hex = Hexahedron(p‚ÇÅ, p‚ÇÇ, p‚ÇÉ, p‚ÇÑ, p‚ÇÖ, p‚ÇÜ, p‚Çá, p‚Çà)
            @test hex(0, 0, 0) ‚âà p‚ÇÅ
            @test hex(1, 0, 0) ‚âà p‚ÇÇ
            @test hex(1, 1, 0) ‚âà p‚ÇÉ
            @test hex(0, 1, 0) ‚âà p‚ÇÑ
            @test hex(0, 0, 1) ‚âà p‚ÇÖ
            @test hex(1, 0, 1) ‚âà p‚ÇÜ
            @test hex(1, 1, 1) ‚âà p‚Çá
            @test hex(0, 1, 1) ‚âà p‚Çà
        end
    end

    @testset "QuadraticTetrahedron" begin
        for T in [Float32, Float64, BigFloat]
            p‚ÇÅ  = Point3D{T}(0, 0, 0)
            p‚ÇÇ  = Point3D{T}(1, 0, 0)
            p‚ÇÉ  = Point3D{T}(0, 1, 0)
            p‚ÇÑ  = Point3D{T}(0, 0, 1)
            p‚ÇÖ  = Point3D{T}(1//2,    0,    0)
            p‚ÇÜ  = Point3D{T}(1//2, 1//2,    0)
            p‚Çá  = Point3D{T}(0,    1//2,    0)
            p‚Çà  = Point3D{T}(0,       0, 1//2)
            p‚Çâ  = Point3D{T}(1//2,    0, 1//2)
            p‚ÇÅ‚ÇÄ = Point3D{T}(0,    1//2, 1//2)
            tet10 = QuadraticTetrahedron(p‚ÇÅ, p‚ÇÇ, p‚ÇÉ, p‚ÇÑ, p‚ÇÖ, p‚ÇÜ, p‚Çá, p‚Çà, p‚Çâ, p‚ÇÅ‚ÇÄ)
            @test tet10(0, 0, 0) ‚âà p‚ÇÅ 
            @test tet10(1, 0, 0) ‚âà p‚ÇÇ 
            @test tet10(0, 1, 0) ‚âà p‚ÇÉ 
            @test tet10(0, 0, 1) ‚âà p‚ÇÑ 
            @test tet10(1//2,    0,    0) ‚âà p‚ÇÖ
            @test tet10(1//2, 1//2,    0) ‚âà p‚ÇÜ 
            @test tet10(0,    1//2,    0) ‚âà p‚Çá 
            @test tet10(0,       0, 1//2) ‚âà p‚Çà 
            @test tet10(1//2,    0, 1//2) ‚âà p‚Çâ 
            @test tet10(0,    1//2, 1//2) ‚âà p‚ÇÅ‚ÇÄ 
        end
    end
    
    @testset "QuadraticHexahedon" begin
        for T in [Float32, Float64, BigFloat]
            p‚ÇÅ  = Point3D{T}(0, 0, 0)
            p‚ÇÇ  = Point3D{T}(1, 0, 0)
            p‚ÇÉ  = Point3D{T}(1, 1, 0)
            p‚ÇÑ  = Point3D{T}(0, 1, 0)
            p‚ÇÖ  = Point3D{T}(0, 0, 1)
            p‚ÇÜ  = Point3D{T}(1, 0, 1)
            p‚Çá  = Point3D{T}(1, 1, 1)
            p‚Çà  = Point3D{T}(0, 1, 1)
            p‚Çâ  = Point3D{T}(1//2,    0,    0)
            p‚ÇÅ‚ÇÄ = Point3D{T}(   1, 1//2,    0)
            p‚ÇÅ‚ÇÅ = Point3D{T}(1//2,    1,    0)
            p‚ÇÅ‚ÇÇ = Point3D{T}(   0, 1//2,    0)
            p‚ÇÅ‚ÇÉ = Point3D{T}(1//2,    0,    1)
            p‚ÇÅ‚ÇÑ = Point3D{T}(   1, 1//2,    1)
            p‚ÇÅ‚ÇÖ = Point3D{T}(1//2,    1,    1)
            p‚ÇÅ‚ÇÜ = Point3D{T}(   0, 1//2,    1)
            p‚ÇÅ‚Çá = Point3D{T}(0, 0, 1//2)
            p‚ÇÅ‚Çà = Point3D{T}(1, 0, 1//2)
            p‚ÇÅ‚Çâ = Point3D{T}(1, 1, 1//2)
            p‚ÇÇ‚ÇÄ = Point3D{T}(0, 0, 1//2)
            hex20 = QuadraticHexahedron(p‚ÇÅ,  p‚ÇÇ,  p‚ÇÉ,  p‚ÇÑ,  p‚ÇÖ,  p‚ÇÜ,  p‚Çá,
                                        p‚Çà,  p‚Çâ,  p‚ÇÅ‚ÇÄ, p‚ÇÅ‚ÇÅ, p‚ÇÅ‚ÇÇ, p‚ÇÅ‚ÇÉ, p‚ÇÅ‚ÇÑ, 
                                        p‚ÇÅ‚ÇÖ, p‚ÇÅ‚ÇÜ, p‚ÇÅ‚Çá, p‚ÇÅ‚Çà, p‚ÇÅ‚Çâ, p‚ÇÇ‚ÇÄ)
            @test hex20(0, 0, 0) ‚âà p‚ÇÅ
            @test hex20(1, 0, 0) ‚âà p‚ÇÇ
            @test hex20(1, 1, 0) ‚âà p‚ÇÉ
            @test hex20(0, 1, 0) ‚âà p‚ÇÑ
            @test hex20(0, 0, 1) ‚âà p‚ÇÖ
            @test hex20(1, 0, 1) ‚âà p‚ÇÜ
            @test hex20(1, 1, 1) ‚âà p‚Çá
            @test hex20(0, 1, 1) ‚âà p‚Çà
            @test hex20(1//2,    0,    0)‚âà p‚Çâ
            @test hex20(   1, 1//2,    0)‚âà p‚ÇÅ‚ÇÄ    
            @test hex20(1//2,    1,    0)‚âà p‚ÇÅ‚ÇÅ
            @test hex20(   0, 1//2,    0)‚âà p‚ÇÅ‚ÇÇ
            @test hex20(1//2,    0,    1)‚âà p‚ÇÅ‚ÇÉ
            @test hex20(   1, 1//2,    1)‚âà p‚ÇÅ‚ÇÑ
            @test hex20(1//2,    1,    1)‚âà p‚ÇÅ‚ÇÖ
            @test hex20(   0, 1//2,    1)‚âà p‚ÇÅ‚ÇÜ
            @test hex20(0, 0, 1//2)‚âà p‚ÇÅ‚Çá
            @test hex20(1, 0, 1//2)‚âà p‚ÇÅ‚Çà
            @test hex20(1, 1, 1//2)‚âà p‚ÇÅ‚Çâ
            @test hex20(0, 0, 1//2)‚âà p‚ÇÇ‚ÇÄ
        end
    end
end
