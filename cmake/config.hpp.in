#pragma once

#include <concepts> // std::is_fundamental_v
#include <cstdlib> // exit
#include <cstdio> // printf
#include <cstdint> // int32_t, int64_t

// Ignore clang-tidy in this case, since these are CMake defines
// NOLINTBEGIN(modernize-macro-to-enum) justified

//==============================================================================
// CMake defines
//==============================================================================

// Use external dependencies
#cmakedefine01 UM2_USE_TBB
#cmakedefine01 UM2_USE_OPENMP
#cmakedefine01 UM2_USE_GMSH
#cmakedefine01 UM2_USE_PNG
#cmakedefine01 UM2_USE_CUDA

// Enable/disable features
#cmakedefine01 UM2_ENABLE_INT64
#cmakedefine01 UM2_ENABLE_FLOAT64

// Enable DBC
#cmakedefine01 UM2_ENABLE_DBC

// Set compile-time filtering of log messages
#define MIN_LOG_LEVEL @UM2_MIN_LOG_LEVEL@

//==============================================================================
// Includes
//==============================================================================

#if UM2_USE_OPENMP
#  include <omp.h>
#endif

#if UM2_USE_CUDA
#  include <cuda_runtime.h>
#endif

//==============================================================================
// Attributes
//==============================================================================

// Optimization
#ifdef PURE
#  error "PURE already defined"
#endif
#ifdef CONST
#  error "CONST already defined"
#endif
#ifdef HOT
#  error "HOT already defined"
#endif
#define PURE  [[gnu::pure]]
#define CONST [[gnu::const]]
#define HOT   [[gnu::hot]]

// CUDA
#ifdef HOST
#  error "HOST already defined"
#endif
#ifdef DEVICE
#  error "DEVICE already defined"
#endif
#ifdef HOSTDEV
#  error "HOSTDEV already defined"
#endif
#ifdef GLOBAL
#  error "GLOBAL already defined"
#endif
#if UM2_USE_CUDA
#  define HOST    __host__
#  define DEVICE  __device__
#  define HOSTDEV __host__ __device__
#  define GLOBAL  __global__
#else
#  define HOST
#  define DEVICE
#  define HOSTDEV
#  define GLOBAL
#endif

// API
#ifdef HIDDEN
#  error "HIDDEN already defined"
#endif
#define HIDDEN __attribute__((visibility("hidden")))

//==============================================================================
// Typedefs
//==============================================================================

// Integer type for indices and integers in API.
#if UM2_ENABLE_INT64
using Size = int64_t; // Index type
using Int = int64_t;  // Integer type in API

HOSTDEV consteval auto
sizeMax() -> Size
{
  return 0x7FFFFFFFFFFFFFFF;
}

#else

using Size = int32_t; // Index type
using Int = int32_t;  // Integer type in API

consteval auto
HOSTDEV sizeMax() -> Size
{
  return 0x7FFFFFFF;
}
#endif

// Floating point type in API.
#if UM2_ENABLE_FLOAT64
using Float = double; // Floating point type in API
#else
using Float = float; // Floating point type in API
#endif

// Integer type for material IDs.
using MaterialID = int8_t;

// For static_asserts which are always false.
template <class... T>
constexpr bool always_false = false;

// NOLINTEND(modernize-macro-to-enum)
