#pragma once

#include <cassert> // assert
#include <cstdint> // int32_t, int64_t

// Ignore clang-tidy in this case, since these are CMake defines
// NOLINTBEGIN(modernize-macro-to-enum) justified

//==============================================================================
// CMake defines
//==============================================================================

//// OpenMP
//#cmakedefine01 UM2_USE_OPENMP

// TBB
#cmakedefine01 UM2_USE_TBB

// Gmsh
#cmakedefine01 UM2_USE_GMSH

// CUDA
#cmakedefine01 UM2_USE_CUDA

// Integer type in API
#cmakedefine01 UM2_ENABLE_INT64

// Floating point type in API
#cmakedefine01 UM2_ENABLE_FLOAT64

// Logging
#define MIN_LOG_LEVEL @UM2_MIN_LOG_LEVEL@

//==============================================================================
// Attributes
//==============================================================================

// Optimization
#undef PURE
#undef CONST
#undef HOT
#undef HIDDEN
#define PURE  [[gnu::pure]]
#define CONST [[gnu::const]]
#define HOT   [[gnu::hot]]

// CUDA
#undef HOST
#undef DEVICE
#undef HOSTDEV
#undef GLOBAL
#if UM2_USE_CUDA
#  include <cuda_runtime.h>
#  define HOST    __host__
#  define DEVICE  __device__
#  define HOSTDEV __host__ __device__
#  define GLOBAL  __global__
#else
#  define HOST
#  define DEVICE
#  define HOSTDEV
#  define GLOBAL
#endif

// API
#define HIDDEN __attribute__((visibility("hidden")))

//==============================================================================
// Typedefs
//==============================================================================

#if UM2_ENABLE_INT64
using Size = int64_t; // Index type
using Int = int64_t;  // Integer type in API

consteval auto
sizeMax() -> Size
{
  return 0x7FFFFFFFFFFFFFFF;
}

#else

using Size = int32_t; // Index type
using Int = int32_t;  // Integer type in API

consteval auto
sizeMax() -> Size
{
  return 0x7FFFFFFF;
}

#endif

#if UM2_ENABLE_FLOAT64
using Float = double; // Floating point type in API
#else
using Float = float; // Floating point type in API
#endif

// Integer type for material IDs.
using MaterialID = int8_t;

template <class... T>
constexpr bool always_false = false;

// NOLINTEND(modernize-macro-to-enum)
